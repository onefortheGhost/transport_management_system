# Generated by Django 5.0.3 on 2024-04-12 23:06

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('First_Name', models.CharField(max_length=100)),
                ('Middle_Name', models.CharField(blank=True, max_length=100, null=True)),
                ('Last_Name', models.CharField(max_length=100)),
                ('Date_of_Birth', models.DateField()),
                ('Address', models.CharField(max_length=100)),
                ('City', models.CharField(max_length=100)),
                ('State', models.CharField(max_length=2)),
                ('Phone_Number', models.CharField(max_length=10)),
                ('Email', models.EmailField(max_length=254)),
                ('Driver_License', models.CharField(max_length=20)),
                ('Driver_License_State', models.CharField(max_length=2)),
                ('Driver_License_Date_Issuance', models.DateField()),
                ('Driver_License_Date_Expiration', models.DateField(blank=True, null=True)),
                ('Driver_License_Class', models.CharField(blank=True, max_length=4, null=True)),
                ('Driver_License_Restrictions', models.CharField(blank=True, max_length=4, null=True)),
                ('Driver_License_Endorsements', models.CharField(blank=True, max_length=4, null=True)),
                ('License_Photo_Front', models.ImageField(blank=True, null=True, upload_to='license_photos/')),
                ('License_Photo_Back', models.ImageField(blank=True, null=True, upload_to='license_photos/')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.PositiveIntegerField()),
                ('vin', models.CharField(blank=True, max_length=17, null=True)),
                ('license_plate', models.CharField(blank=True, max_length=7, null=True)),
                ('mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('registration_owner', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_start', models.DateField(blank=True, null=True)),
                ('insurance_expiration', models.DateField(blank=True, null=True)),
                ('empty_weight', models.PositiveIntegerField(blank=True, null=True)),
                ('oil_change_interval', models.PositiveIntegerField(blank=True, null=True)),
                ('oil_change_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('tire_change_interval', models.PositiveIntegerField(blank=True, null=True)),
                ('tire_change_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('inspection_interval', models.PositiveIntegerField(blank=True, null=True)),
                ('inspection_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('inspection_date', models.DateField(blank=True, null=True)),
                ('fuel_capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_MPG', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_MPG_rolling_average_1000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_MPG_rolling_average_5000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_MPG_rolling_average_10000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_MPG_Total', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_GPM', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_GPM_rolling_average_1000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_GPM_rolling_average_5000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_GPM_rolling_average_10000', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_GPM_Total', models.PositiveIntegerField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('location_gps', models.CharField(blank=True, max_length=100, null=True)),
                ('destination', models.CharField(blank=True, max_length=100, null=True)),
                ('destination_gps', models.CharField(blank=True, max_length=100, null=True)),
                ('destination_eta', models.DateTimeField(blank=True, null=True)),
                ('yard_assignment', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
